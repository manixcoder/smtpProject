<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Dashboard extends CI_Controller	{	function __construct()		{		parent::__construct();		$this->load->helper(array('form','url','captcha'));		$this->load->database();		$this->load->library(array('session','form_validation','email'));		$this->load->model('Admin_dashboard');		$this->load->model('PushnotificationModel');		$u_rec_id = $this->session->userdata('email');		error_reporting(0);		if (empty($u_rec_id))			{				redirect('Welcome');			}		}	function index()	{		$u_rec_id = $this->session->userdata('email');		if (isset($u_rec_id))		{			$result['count_category'] = $this->Admin_dashboard->count_category();			$result['count_location'] = $this->Admin_dashboard->count_location();			$result['count_user'] = $this->Admin_dashboard->count_user();			$this->load->view('templates/header');			$this->load->view('templates/adminDashboard', $result);			$this->load->view('templates/footerss');		}	  else		{			redirect('Welcome');		}	}	function edits_locations($city_location_id)		{			$result['static_citysss'] = $this->Admin_dashboard->edit_main_location($city_location_id);			$this->load->view('templates/header');			$this->load->view('templates/edits_locations', $result);			$this->load->view('templates/footerss');		}	function updates_locations()		{			$updatData = array(				'city_location_id' => $this->input->post('city_location_id') ,				'area_location' 	=> $this->input->post('area_location') ,				'areaArabic' 	=> $this->input->post('areaArabic')			);						$data = $this->Admin_dashboard->updates_locations($updatData);			if ($data)				{					redirect('Dashboard/add_location_area');				}		}	function pricedashboard()	{		$u_rec_id = $this->session->userdata('email');		if (isset($u_rec_id))			{				$result['data'] 			= $this->Admin_dashboard->fetch_category();				$result['locat'] 			= $this->Admin_dashboard->fetch_location();				$result['count_category'] = $this->Admin_dashboard->count_category();				$result['count_location'] = $this->Admin_dashboard->count_location();				$result['selected_category'] = $this->Admin_dashboard->categoryData();				$this->load->view('templates/header');				$this->load->view('templates/pricedashboard', $result);				$this->load->view('templates/footerss');			}		  else			{				redirect('Welcome');			}	}	function edit_admin_profile()		{			$result['admin_no'] = $this->Admin_dashboard->get_admin_mobile_no();			$this->load->view('templates/header');			$this->load->view('templates/edit_admin_profile', $result);			$this->load->view('templates/footerss');		}	function update_admin_profile()		{		$this->form_validation->set_error_delimiters('<div class="error">', '</div>');		$this->form_validation->set_rules('contact_no', 'Mobile No', 'required|min_length[11]|max_length[11]');		if ($this->form_validation->run() == True)			{				$data = $this->input->post();				$this->db->update('admin_user', $data);				redirect('Dashboard/edit_admin_profile');			}		  else			{				$result['admin_no'] = $this->Admin_dashboard->get_admin_mobile_no();				$this->load->view('templates/header');				$this->load->view('templates/edit_admin_profile', $result);				$this->load->view('templates/footerss');			}		}	function Change_Admin_Detail()		{			$data = array(				'name' => $this->input->post('name') ,				'email' => $this->input->post('email')			);		}	function delete_pricedashboard($Id)		{		$test = array(			'Id' => $Id		);		$this->db->delete('dsshboard', $test);		$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">Data delete successfully. </div>');		redirect('Dashboard/pricedashboard');		}	function edit_pricedashboard($Id)	{		$result['edit_dash'] = $this->Admin_dashboard->edit_pricedashboard($Id);		$result['selected_category'] = $this->Admin_dashboard->fetch_selected_category();		$result['locat'] = $this->Admin_dashboard->fetch_location();		$this->load->view('templates/header');		$this->load->view('templates/edit_pricedashboard', $result);		$this->load->view('templates/footerss');	}	function update_pricedashboard()	{		$data = $this->input->post();		$Id = array(			'Id' => $data['time_to']		);		if (empty($data['Location']) && empty($data['Category']))		{		$datasss = array(			'price' => $data['Price']		);		}	  else		if (empty($data['Category']))		{		$datasss = array(			'location_Id' => $data['Location'],			'price' => $data['Price']		);		}	  else		if (empty($data['Location']))		{		$datasss = array(			'category_id' => $data['Category'],			'price' => $data['Price']		);		}	  else		{		$datasss = array(			'location_Id' => $data['Location'],			'category_id' => $data['Category'],			'price' => $data['Price']		);		}	$datas = $datasss;	$result = $this->Admin_dashboard->update_pricedashboard($Id, $datas);	if ($result)	{		redirect('Dashboard/pricedashboard');	}	}	function add_category()		{		$data['Category'] = $this->Admin_dashboard->getStaticCategory();		$this->load->view('templates/header');		$this->load->view('templates/addfood_category', $data);		$this->load->view('templates/footerss');		}	function addCategory()		{		if (isset($_POST['submit']))			{			$query = $this->Admin_dashboard->addStaticCategory($_POST['categoryName'], $_POST['categoryNameArabic']);			$this->session->set_flashdata("message_name", "<div id='request' style = 'color:green;font-size: 18px;fontfamily: bold;'>Catrgory Added Successfully !!</div>");			}		$data['Category'] = $this->Admin_dashboard->getAllStaticCategory();		$this->load->view('templates/header');		$this->load->view('templates/AddCategoryView', $data);		$this->load->view('templates/footerss');		}	function deleteCategory($id)		{		$this->db->where('cat_id', $id);		$this->db->delete('Static_Category');		$this->db->select('*');		$this->db->from('sub_category');		$this->db->where('categoryId', $id);		$result = $this->db->get();		$subCat = $result->result_array();		if (!empty($subCat))			{			foreach($subCat as $Cat)				{				$this->db->where('category_id', $Cat['s_Id']);				$this->db->delete('dsshboard');				}			}		$this->db->where('categoryId', $id);		$this->db->delete('sub_category');		$data['Category'] = $this->Admin_dashboard->getAllStaticCategory();		$this->session->set_flashdata("message_name", "<div id='request' style = 'color:green;font-size: 18px;fontfamily: bold;'>Category Delete Successfully !!</div>");		redirect('Dashboard/addCategory');		}	function editCategory($id)		{		if (isset($_POST['submit']))			{			$data = array(				'category_name' => $this->input->post('categoryName') ,				'categoryNameArabic' => $this->input->post('categoryNameArabic')			);			$data1['category'] = $this->Admin_dashboard->updateCategoryData($id, $data);			$this->session->set_flashdata("message_name", "<div id='request' style = 'color:green;font-size: 18px;fontfamily: bold;'>Data updated Successfully !!</div>");			$data['Category'] = $this->Admin_dashboard->getAllStaticCategory();			redirect('Dashboard/addCategory');			}		  else			{			$data['category'] = $this->Admin_dashboard->FetchCategoryUpdateData($id);			$this->load->view('templates/header');			$this->load->view('templates/EditCategoryView', $data);			$this->load->view('templates/footerss');			}		}	function edit_category()		{		$data = $this->input->post();		$ids = $data['customers_id'];		$result = $this->Admin_dashboard->edit_category($ids);		print_r($result[0]->sub_Category);		}	function update_category()		{		$data = $this->input->post();		if (isset($_FILES["Category_Imagess"]["name"]) && $_FILES["Category_Imagess"]["name"] != "")			{			$new_name = rand() . $_FILES["Category_Imagess"]['name'];			$config['upload_path'] = './uploads/category_image/';			$config['allowed_types'] = '*';			// $config['max_size'] = '100';			// $config['max_width']  = '1024';			// $config['max_height']  = '768';			// $config['overwrite'] = TRUE;			$config['file_name'] = $new_name;			$config['encrypt_name'] = FALSE;			$config['remove_spaces'] = TRUE;			$this->load->library('upload', $config);			$this->upload->initialize($config);			$upload_data = $this->upload->do_upload('Category_Imagess');			$category_images = 'uploads/category_image/' . $new_name;			$data = array(				's_Id' => $data['s_Id'],				'categoryId' => $data['categoryId'],				'sub_Category' => $data['sub_Category'],				'categoryNameArabic' => $data['categoryNameArabic'],				'category_image' => $category_images			);			}		  else			{			$category_images = 'uploads/category_image/' . $new_name;			$data = array(				's_Id' => $data['s_Id'],				'categoryId' => $data['categoryId'],				'sub_Category' => $data['sub_Category'],				'categoryNameArabic' => $data['categoryNameArabic'],				'category_image' => ''			);			}		$result = $this->Admin_dashboard->update_category($data);		if ($result)			{			$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">New subcategory successfully updated. </div>');			redirect('Dashboard/add_category');			}		}	function ajax_list()		{		$list = $this->Admin_dashboard->get_datatables();		$data = array();		$no = $_POST['start'];		foreach($list as $customers)			{			$no++;			$row = array();			$row[] = $no;			$row[] = $customers->sub_Category;			$row[] = $customers->subCategoryArabic;			$row[] = $customers->category_name;			$row[] = $customers->categoryNameArabic;			$row[] = "<a href='javascript:void(0)' onclick='ConfirmDelete($customers->s_Id)'>Delete</a>|					<a href='" . base_url() . "Dashboard/edit_sub_category/" . $customers->s_Id . "'>Edit</a>";			$data[] = $row;			}		$output = array(			"draw" => $_POST['draw'],			"recordsTotal" => $this->Admin_dashboard->count_all() ,			"recordsFiltered" => $this->Admin_dashboard->count_filtered() ,			"data" => $data,		);		echo json_encode($output);		}	function edit_sub_category($s_Id)		{		$ids = $s_Id;		$result['id'] = $ids;		$result['mess_post'] = $this->Admin_dashboard->edit_category($ids);		$result['category'] = $this->Admin_dashboard->getAllStaticCategory();		$this->load->view('templates/header');		$this->load->view('templates/edit_sub_category', $result);		$this->load->view('templates/footerss');		}	function insert_category()		{		$myarray = $this->input->post();		$this->form_validation->set_rules('sub_Category', 'category', 'trim|required');		$this->form_validation->set_rules('subCategoryArabic', 'subCategoryArabic', 'trim|required');		if ($this->form_validation->run() == True)			{			if (isset($_FILES["category_image"]["name"]) && $_FILES["category_image"]["name"] != "")				{				$new_name = rand() . $_FILES["category_image"]['name'];				$config['upload_path'] = './uploads/category_image/';				$config['allowed_types'] = '*';				$config['max_size'] = '100';				$config['max_width']  = '1024';				$config['max_height']  = '768';				$config['overwrite'] = TRUE;				$config['file_name'] = $new_name;				$config['encrypt_name'] = FALSE;				$config['remove_spaces'] = TRUE;				$this->load->library('upload', $config);				$this->upload->initialize($config);				$upload_data = $this->upload->do_upload('category_image');				$category_images = 'uploads/category_image/' . $new_name;				}			  else				{				$category_images = 'uploads/category_image/noprifile.png';				}			$data = array(				'categoryId' => $myarray['categoryId'],				'sub_Category' => $myarray['sub_Category'],				'subCategoryArabic' => $myarray['subCategoryArabic'],				'category_image' => $category_images			);			$result = $this->Admin_dashboard->insert_category($data);			$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">New subcategory successfully created. </div>');			redirect('Dashboard/add_category');			}		  else			{			if (empty($myarray['sub_Category']))				{				$data['validation'] = array(					'sub_Category' => '1'				);				}			$this->load->view('templates/header');			$this->load->view('templates/addfood_category', $data);			$this->load->view('templates/footerss');			}		}	function delete_category($customers_id)		{		$this->db->where('category_id', $customers_id);		$this->db->delete('dsshboard');		$test = array(			's_Id' => $customers_id		);		$this->db->delete('sub_category', $test);		$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">Data delete successfully. </div>');		redirect('Dashboard/add_category');		}	function add_location()	{		$u_rec_id = $this->session->userdata('email');		if (isset($u_rec_id))		{			$result['location']	 	= $this->Admin_dashboard->fetch_locations();			$result['static_citys'] = $this->Admin_dashboard->static_city();			$this->load->view('templates/header');			$this->load->view('templates/add_location', $result);			$this->load->view('templates/footerss');		}		  else		{			redirect('Welcome');		}	}	function get_area_from_city()		{		$data = $this->input->post();		$array = $this->Admin_dashboard->get_area_from_city($data);?>			<select class="form-control" name="area" id="myselectcity" required>			<option value="">Choose area</option>			<?php		foreach($array as $value_name_is_space)			{ ?>				<option value="<?php			echo $value_name_is_space['area_location'] . '/' . $value_name_is_space['areaArabic']; ?>">				<?php			echo $value_name_is_space['area_location']; ?>/	<?php			echo $value_name_is_space['areaArabic']; ?>								</option>			<?php			} ?>			</select>		<?php		}	function edit_location($adminAddress_id)	{		$result['static_citys']  = $this->Admin_dashboard->static_city();		$result['edit_location'] = $this->Admin_dashboard->edit_location($adminAddress_id);		$result['area_location'] = $this->Admin_dashboard->get_area_location($adminAddress_id);		$this->load->view('templates/header');		$this->load->view('templates/edit_location', $result);		$this->load->view('templates/footerss');	}	function update_location()	{		$data 				= $this->input->post();			$data 				= $this->input->post();						$adminAddress_id 	= $data['adminAddress_id'];			$datas = $this->input->post();			$mkArea = $datas['area'];			$ddd = explode('/', $mkArea);			$time_tos = $datas['time_to'];			$time_froms = $datas['time_from'];			$curr_date = date("y-m-d");			$time_fromss = date("g:i a", strtotime($time_froms));			$time_toss = date("g:i a", strtotime($time_tos));			$data = array(				'city' 				=> $datas['city'],				'area' 				=> $ddd[0],				'areaArabic' 		=> $ddd[1],				'time_from' 		=> $curr_date . " " . $time_tos,				'time_to' 			=> $curr_date . " " . $time_froms,				'adminAddress_id'	=> $adminAddress_id 			);			if ($time_froms > $time_tos)			{				$result 			= $this->Admin_dashboard->update_location($data);				if ($result)				{					$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">Data update successfully. </div>');					redirect('Dashboard/add_location');				}			}			 else			{				$this->session->set_flashdata('error_msg', '<div class="alert alert-danger text-center"><strong>Error!</strong> Please enter right time! </div>');				$a= "Dashboard/edit_location/".$adminAddress_id."";				redirect($a);			}	}	function insert_location()	{		$this->form_validation->set_error_delimiters('<div class="error_location">', '</div>');		$this->form_validation->set_rules('city','name have to display in the error message', 'required|is_natural');		$this->form_validation->set_rules('area', 'area', 'required');		$this->form_validation->set_rules('time_to', 'times', 'required');		$this->form_validation->set_rules('time_from', 'times', 'required');		if ($this->form_validation->run() == True)		{			$datas = $this->input->post();			$mkArea = $datas['area'];			$ddd = explode('/', $mkArea);			$time_tos = $datas['time_to'];			$time_froms = $datas['time_from'];			$curr_date = date("y-m-d");			$time_fromss = date("g:i a", strtotime($time_froms));			$time_toss = date("g:i a", strtotime($time_tos));			$data = array(				'city' => $datas['city'],				'area' => $ddd[0],				'areaArabic' => $ddd[1],				'time_from' => $curr_date . " " . $time_tos,				'time_to' => $curr_date . " " . $time_froms			);			if ($time_froms > $time_tos)			{				$result = $this->Admin_dashboard->insert_location($data);				if ($result)					{					$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">New time has been added. </div>');					redirect('Dashboard/add_location');					}			}			  else			{				$this->session->set_flashdata('error_msg', '<div class="alert alert-danger text-center"><strong>Error!</strong> Please enter right time! </div>');				redirect('Dashboard/add_location');			}		}		  else			{			redirect('Dashboard/add_location');			}		}	function deletelocation($location_id)		{		if ($location_id)			{			$test = array(				'adminAddress_id' => $location_id			);			$this->db->delete('admin_adderss', $test);			$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">Data delete successfully. </div>');			redirect('Dashboard/add_location');			}		}	function androidepushnotification($deviceTokens, $name, $title, $message,$arbaicMessage ,$notification_type)		{		define('API_ACCESS_KEY', 'AIzaSyD-QfR3lQ8d-obicKd3NdrLb1_H788taGo');		$fcmUrl = 'https://fcm.googleapis.com/fcm/send';		$token = $deviceTokens;	if (empty($name))			{			$extraNotificationData = ["title" => 'i-washy', "order_id" => $name, "body" => $message,'arbaicMessage' => $arbaicMessage, 'sanaym' => $notification_type ,'icon' => 'myIcon','badge' => $badge];			}		  else			{			$extraNotificationData = ["title" => 'i-washy', "order_id" => $name, "body" => $message,'arbaicMessage' => $arbaicMessage, 'sanaym' => $notification_type ,'icon' => 'myIcon','badge' => $badge];			}		$fcmNotification = [		'to' => $token, 		'data' => $extraNotificationData];		$headers = ['Authorization: key=' . API_ACCESS_KEY, 'Content-Type: application/json'];		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, $fcmUrl);		curl_setopt($ch, CURLOPT_POST, true);		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fcmNotification));		$result = curl_exec($ch);		curl_close($ch);		}	function iphonepushnotification($deviceTokens, $name, $title, $message,$arbaicMessage,$notification_type)		{		$deviceToken = "$deviceTokens";		$passphrase = 'compass';		$notification_types = "$notification_type";		$message 	= "$message";		$ctx 		= stream_context_create();		stream_context_set_option($ctx, 'ssl', 'local_cert', 'iWashy.pem');		stream_context_set_option($ctx, 'ssl', 'passphrase', $passphrase);		$fp = stream_socket_client('ssl://gateway.sandbox.push.apple.com:2195', $err, $errstr, 60, STREAM_CLIENT_CONNECT | STREAM_CLIENT_PERSISTENT, $ctx);		if (!$fp) exit("Failed to connect: $err $errstr" . PHP_EOL);		echo PHP_EOL;		if (empty($name))			{				$body['aps'] = array(					'alert' 		=> $message,					'arbaicMessage'	=> $arbaicMessage,					'sound' 		=> 'default',					'type' 			=> $notification_types,					'badge'			=> $badge				);			}		  else			{				$body['aps'] = array(					'alert' 		=> $message,					'sound' 		=> 'default',					'arbaicMessage'	=> $arbaicMessage,					"order_id" 		=> $name,					'type' 			=> $notification_types,					'badge'			=> $badge				);			}		$payload = json_encode($body);		$msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload;		$result = fwrite($fp, $msg, strlen($msg));		fclose($fp);		}	function insert_full_category()		{		$location = $this->input->post('location');		$category = $this->input->post('category');		$price = $this->input->post('price');		$location_array = explode(",", $location);		$category_array = explode(",", $category);		foreach($location_array as $location)			{			if ($location != 0 && !empty($location))				{				foreach($category_array as $category)					{					if ($location != 0 && !empty($category))						{						$array = array(							'location_Id' => $location,							'category_id' => $category,							'price' => $price						);						$result = $this->Admin_dashboard->insert_full_category($array);						}					}				}			}		if (!empty($location_array))			{			echo '1';			}		}	function Promo_Code()		{		$result['user_code'] = $this->Admin_dashboard->promo_code_user();		$result['code'] = $this->Admin_dashboard->promo_code();		$this->load->view('templates/header');		$this->load->view('templates/promo_code', $result);		$this->load->view('templates/foooter');		}	function insert_prompcode()	{		$user 			= $this->input->post('location');		$price 			= $this->input->post('price');		$promo_code 	= $this->input->post('promo_code');		$expire_date 	= $this->input->post('expire_date');		if (empty($user))		{			$data = $this->Admin_dashboard->promo_code_users();			foreach($data as $location)			{				$bID   = $location['user_id'];				$query = $this->db->query("UPDATE user SET badge = badge + '1' WHERE user_id = '".$bID."'");				$test_for_uniq 	= $location['user_id'];				$data 			= array(						'pc_assignTo' 	 => $test_for_uniq,						'promo_discount' => $price,						'promoCode' 	 => $promo_code,						'expireDate' 	 => $expire_date,						'promo_type' 	 => 'public'					);				$this->Admin_dashboard->insert_promo_code($data);				$bdgDat = $this->Admin_dashboard->promo_code_users_by_id($bID);				$device_type 		= $location['device_type'];				$deviceTokens 		= $location['device_token'];				$Language			= $location['selectedLanguage'];				$badge 	  			= $bdgDat[0]['badge'];				$name 				= $location['name'];				$title 				= "i-washy";				$curr_ent_date 		= date('Y-m-d H:i:s');				$message 			=  "Admin sent you promo code.";				$arbaicMessage  	= "أرسل لك المشرف بروموكود ، تحقق منه في شاشة البروموكود";				$notification_type 	= 'promo code';				$arrayss = array(					'noti_user_id' 			 => $test_for_uniq,					'noti_promo_code' 		 => $promo_code,					'notification_text' 	 => "Admin sent you promo code.",					'notification_arbicText' => $arbaicMessage,					'notification_date' 	 => $curr_ent_date				);				$this->db->insert('notification', $arrayss);				if ($device_type == "2")				{					if($Language == 1)					{						$message = "أرسل لك المشرف بروموكود ، تحقق منه في شاشة البروموكود";					}					else					{						$message 			=  "Admin sent you promo code.";					}					$userData = array(						"order_id" 		=> $name,						'arbaicMessage'	=> $arbaicMessage,						'type' 			=> $notification_type,						'badge' 	  		=> $badge,				 		'vibrate' 			=> 1,				 		'sound' 			=> 1						);					$this->PushnotificationModel->send_notifications($deviceTokens,$message,$userData,$badge);				}				else				if ($device_type == "1")				{					$this->androidepushnotification($deviceTokens, $name, $title, $message,$arbaicMessage ,$notification_type,$badge);				}			}		}		 else		{			$location_array = explode(",", $user);			foreach($location_array as $location)			{				if ($location != 0 || !empty($location))				{					$datas = $this->Admin_dashboard->promo_code_users_by_id($location);					$data  = array(							'pc_assignTo' 		=> $location,							'promo_discount' 	=> $price,							'promoCode' 		=> $promo_code,							'expireDate' 		=> $expire_date,							'promo_type'		=> 'private'						);					$this->Admin_dashboard->insert_promo_code($data);					foreach($datas as $final_result)					{						$bID   = $datas[0]['user_id'];						$query = $this->db->query("UPDATE user SET badge = badge + '1' WHERE user_id = '".$bID."'");						 print_r($final_result);						$device_type  		= $final_result['device_type'];						$deviceTokens 		= $final_result['device_token'];						$name  		 		= $final_result['name'];						$Language	  		= $final_result['selectedLanguage'];						$bdgDat 			= $this->Admin_dashboard->promo_code_users_by_id($bID);						$badge 	  			= $bdgDat[0]['badge'];						$title 		  		= "i-washy";						$message 			=  "Admin sent you promo code.";						$arbaicMessage  	= "أرسل لك المشرف بروموكود ، تحقق منه في شاشة البروموكود";						$notification_type  = 'promo code';						if ($device_type == "2")						{							if($Language == 1)							{								$message = "أرسل لك المشرف بروموكود ، تحقق منه في شاشة البروموكود";															}							$userData = array(								"order_id" 		=> $name,								'arbaicMessage'	=> $arbaicMessage,								'type' 			=> $notification_type,								'badge' 	  		=> $badge,						 		'vibrate' 			=> 1,						 		'sound' 			=> 1							);							$this->PushnotificationModel->send_notifications($deviceTokens,$message,$userData,$badge);						}						else						if ($device_type == "1")						{							$this->androidepushnotification($deviceTokens, $name, $title, $message,$arbaicMessage,$notification_type,$badge);						}					}					$curr_ent_date = date('Y-m-d H:i:s');					$arrayss 		= array(							'noti_user_id' 			 => $datas[0]['user_id'],							'noti_promo_code' 		 => $promo_code,							'notification_text' 	 => $message,							'notification_arbicText' => $arbaicMessage,							'notification_type' 	 => 'promo_code',							'notification_date' 	 => $curr_ent_date						);					$whare = array(						'noti_user_id' 		=> $datas[0]['user_id'],						'noti_promo_code' 	=> $promo_code					);					$this->db->select('*');					$this->db->from('notification');					$this->db->where($arrayss);					$result = $this->db->get();					if ($result->num_rows())					{					}					else					{						$this->db->insert('notification', $arrayss);					}				}			}		}		if (!empty($price) && !empty($promo_code))		{			echo '1';		}	}	function editpromocode($promoCode_id)		{		$result['user_code'] = $this->Admin_dashboard->promo_code_user();		$result['code'] = $this->Admin_dashboard->promo_code();		$result['editpromocodes'] = $this->Admin_dashboard->editpromocode($promoCode_id);		$this->load->view('templates/header');		$this->load->view('templates/editpromocode', $result);		$this->load->view('templates/footerss');		}	function updatepromocode()		{		$this->form_validation->set_error_delimiters('<div class="error_location">', '</div>');		$this->form_validation->set_rules('inputPrice', 'Price', 'required');		$this->form_validation->set_rules('promo_code', 'promo code', 'required');		$this->form_validation->set_rules('datepicker', 'datepicker', 'required');		$data = $this->input->post();		$promoCode_id = $data['promoCode_id'];		if ($this->form_validation->run() == True)			{			$id = array(				'promoCode_id' => $data['promoCode_id']			);			$datas = array(				'pc_assignTo' => $data['Select_User'],				'promo_discount' => $data['inputPrice'],				'promoCode' => $data['promo_code'],				'expireDate' => $data['datepicker']			);			$final_result = $this->Admin_dashboard->updatepromocode($datas, $id);			if ($final_result)				{				redirect('Dashboard/Promo_Code');				}			}		  else			{			redirect('Dashboard/editpromocode/' . $promoCode_id);			}		}	function deletepromocode($promoCode)		{		$pcl = str_replace('%20', ' ', $promoCode);		$test = array(			'promoCode' => $pcl		);		$this->db->delete('user_promoCode', $test);		$this->session->set_flashdata('success_msg', '<div id="flesh_data_frontant" class="alert alert-success text-center">Data delete successfully. </div>');		redirect('Dashboard/Promo_Code');		}	function deletepromocode_user($promoCode_id)		{		$test = array(			'promoCode_id' => $promoCode_id		);		$this->db->delete('user_promoCode', $test);		$this->session->set_flashdata('success_msg', '<div id="flesh_data_frontant" class="alert alert-success text-center">Data delete successfully. </div>');		redirect('Dashboard/Promo_Code');		}	function Order_management()		{		$data['result'] = $this->Admin_dashboard->Order_management();		$this->load->view('templates/header');		$this->load->view('templates/Order_management', $data);		$this->load->view('templates/footerss');		}	function Order_management_detail()		{		$datas = $this->input->post('id');		$data = $this->Admin_dashboard->Order_management_detail($datas);		$datasss = $this->Admin_dashboard->Order_management_image($datas);?>		<?php		if (empty($data))			{?>			<section class="demo">		  <div class="container">		  <div style="display: inline-block;" align="center">		  <img src="<?php			echo base_url(); ?><?php			echo "uploads/category_image/not_data_found.png"?>">		  </div>		  </div>		</section>			<?php			die;			}?>			<section class="demo">		  <button class="next">Next</button>		  <button class="prev">Previous</button>		  <div class="container">		  <div style="display: inline-block;">		<?php		if (empty($datasss))			{?>		<img src="<?php			echo base_url() . "/" . "uploads/no_image/image_not_found.png"; ?>"/>	<?php			}		  else			{?>		  <img src="<?php			echo base_url() . "/" . $datasss[0][0]; ?>"/>		<?php			} ?>		</div>		<?php		$count = count($datasss);		foreach($datasss as $resultss)			{			for ($i = 0; $i <= $count; $i++)				{				if (!empty($resultss[$i]))					{					$resultss_images = $resultss[$i];?>	<div>			<img src="<?php					echo base_url(); ?><?php					echo $resultss_images; ?>">			</div>		<?php					}				}			}?>		</div>  </div>	</section>				<style>		.container {		  max-width: 400px;		  background-color: black;		  margin: 0 auto;		  text-align: center;		  position: relative;		}		.container div {		  background-color: white;		  width: 100%;		  display: inline-block;		  display: none;		}		.container img {		  width: 100%;		  height: 50%;		}		button {		  position: absolute;		}		.next {		  right: 5px;		}		.prev {		  left: 5px;		}		</style>		<script>			var currentIndex = 0,			  items = $('.container div'),			  itemAmt = items.length;			function cycleItems() {			  var item = $('.container div').eq(currentIndex);			  items.hide();			  item.css('display','inline-block');			}			var autoSlide = setInterval(function() {			  currentIndex += 1;			  if (currentIndex > itemAmt - 1) {				currentIndex = 0;			  }			  cycleItems();			}, 50000);			$('.next').click(function() {			  clearInterval(autoSlide);			  currentIndex += 1;			  if (currentIndex > itemAmt - 1) {				currentIndex = 0;			  }			  cycleItems();			});			$('.prev').click(function() {			  clearInterval(autoSlide);			  currentIndex -= 1;			  if (currentIndex < 0) {				currentIndex = itemAmt - 1;			  }			  cycleItems();			});		</script>		<?php		echo '<table id="example" class="table table-striped table-bordered"  align="center" border="2" style="width:100%"><tr><th>sub_category</th><th>product_quantity</th><th>product amount</th><th>Total</th></tr>';		foreach($data as $result)			{			$product_quantity = $result['product_quantity'];			$total_price = $result['total_amount'];			$discount_promoCode = $result['discount_promoCode'];			$total_final_price = $product_quantity * $result['base_price'];			echo '<tr>' . '<td>' . $result['product_sub_Categorys'] . '</td>' . '<td>' . $product_quantity . '</td>' . '<td>' . $result['base_price'] . '</td>' . '<td>' . $total_final_price . '</td>' . '</tr>';			@$total_amountss+= $total_final_price;			}		echo '<tr><td colspan = 4 align=right><h3>Total Amount = ' . $total_amountss . '</h3></td></tr>';		if (empty($discount_promoCode))			{			$discount_promoCode = '0';			}		echo '<tr><td colspan = 4 align=right><h3>Promocode discount = ' . $discount_promoCode . '%</h3></td></tr>';		echo '<tr><td colspan = 4 align=right><h3>Total Discount with promocode = ' . $total_price . '</h3></td></tr>';		echo '</table>';		}	function Order_management_statusss()	{		$data 				= $this->input->post();		$orderStatus_text 	= $data['orderStatus_text'];		$this->db->insert('orderTracking', $data);		$tracking_orderId 	= $data['tracking_orderId'];		$order_id 			= $data['order_id'];		$result 			= $this->Admin_dashboard->Order_management_statusss_user($tracking_orderId);		$name 				= "$order_id";		$query = $this->db->query("UPDATE user SET badge = badge + '1' WHERE user_id = '".$tracking_orderId."'");		$result 			= $this->Admin_dashboard->Order_management_statusss_user($tracking_orderId);		$badge 	  			= $result[0]['badge'];				$device_type  		= $result[0]['device_type'];		$deviceTokens 		= $result[0]['device_token'];		$Language 			= $result[0]['selectedLanguage'];		$title 		  		= 'i-washy';		$notification_type 	= 'order tracking';		$message 			= "$orderStatus_text";		$arbaicMessage  	= "$orderStatus_text";		$curr_ent_date  	= date('Y-m-d H:i:s');		$arrayss = array(			'noti_user_id' 			=> $tracking_orderId,			'noti_promo_code' 		=> $orderStatus_text,			'notification_text' 	 => $message,			'notification_arbicText' => $arbaicMessage,			'notification_type' 	 => 'order_track',			'notification_date' 	 => $curr_ent_date		);		$this->db->insert('notification', $arrayss);		if ($device_type == '1')		{			$this->androidepushnotification($deviceTokens,$name,$title,$message,$arbaicMessage,$notification_type,$badge);		}		  else		if ($device_type == '2')		{			$userData = array(						"order_id" 		=> $name,						'arbaicMessage'	=> $arbaicMessage,						'type' 			=> $notification_type,						'badge' 	  		=> $badge,				 		'vibrate' 			=> 1,				 		'sound' 			=> 1						);			 $this->PushnotificationModel->send_notifications($deviceTokens,$message,$userData,$badge);		}		echo "1";			}	function Order_Tracking()		{		$result['Order_Tracking'] = $this->Admin_dashboard->Order_Tracking();		$this->load->view('templates/header');		$this->load->view('templates/Order_Tracking', $result);		$this->load->view('templates/footerss');		}	function Feedback()		{		$result['feed'] = $this->Admin_dashboard->Feedback();		$this->load->view('templates/header');		$this->load->view('templates/feedback', $result);		$this->load->view('templates/footerss');		}	function slider_Images()		{		$result['image'] = $this->Admin_dashboard->get_slider_Images();		$this->load->view('templates/header');		$this->load->view('templates/slider_Images', $result);		$this->load->view('templates/footerss');		}	function delete_slider_Images($Id)		{		$data = array(			'Id' => $Id		);		$datas = $this->Admin_dashboard->delete_image_file($data);		$string_slider_image = str_replace(' ', '_', $datas[0]['slider_image']);		$string_slider_image_base = base_url() . "/" . $string_slider_image;		@unlink($string_slider_image_base);		$this->db->delete('slider_image', $data);		$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">Image delete successfully. </div>');		redirect('Dashboard/slider_Images');		}	function Userdetail()		{		$Userdetails['user_detail'] = $this->Admin_dashboard->user_detail();		$this->load->view('templates/header');		$this->load->view('templates/user_detail', $Userdetails);		$this->load->view('templates/footerss');		}	function delete_Userdetail($user_id)		{		$data 			= $this->Admin_dashboard->promo_code_users_by_id($user_id);		$name 			= $data[0]['name'];		$device_type 	= $data[0]['device_type'];		$deviceTokens 	= $data[0]['device_token'];		$title 			= 'i-washy';		$message 		= "$name has been deleted";		$arbaicMessage  = "$name has been deleted";		$notification_type = 'delete';		if ($device_type == "1")		{			$this->androidepushnotification($deviceTokens, $name, $title, $message,$arbaicMessage, $notification_type);					}		  else		if ($device_type == "2")		{			$this->iphonepushnotification($deviceTokens, $name, $title, $message,$arbaicMessage, $notification_type);		}		$delete_data = array(			'user_id' => $user_id		);		$this->db->delete('user', $delete_data);		$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">Data delete successfully. </div>');		redirect('Dashboard/Userdetail');		}	function add_slider_Images()		{		$count_slider_Images = $this->Admin_dashboard->count_slider_Images();		if ($count_slider_Images >= '5')			{			$this->session->set_flashdata('success_msg', '<div class="alert alert-danger text-center"><strong>Error ! </strong> You can upload maximum 5 image!</div>');			redirect('Dashboard/slider_Images');			die;			}		if (isset($_FILES["category_image"]["name"]) && $_FILES["category_image"]["name"] != "")			{			$new_name = rand() . $_FILES["category_image"]['name'];			$config['upload_path'] = './uploads/slider_image/';			$config['allowed_types'] = '*';			$config['encrypt_name'] = FALSE;			$config['file_name'] = $new_name;			$config['remove_spaces'] = TRUE;			$this->load->library('upload', $config);			$this->upload->initialize($config);			$upload_data = $this->upload->do_upload('category_image');			$dates = date('y-m-d');			$category_images = 'uploads/slider_image/' . $new_name;			$array_image = array(				'slider_image' => $category_images			);			$this->Admin_dashboard->slider_Images($array_image);			$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">New Image successfully added. </div>');			redirect('Dashboard/slider_Images');			}		  else			{			redirect('Dashboard/slider_Images');			}		}	function add_location_area()		{		$result['location'] = $this->Admin_dashboard->fetch_locations_area();		$result['static_citys'] = $this->Admin_dashboard->static_city();		$this->load->view('templates/header');		$this->load->view('templates/add_location_area', $result);		$this->load->view('templates/footerss');		}	function insert_add_location_area()		{		$this->form_validation->set_rules('city', 'city', 'required');		$this->form_validation->set_rules('area', 'area', 'required');		$this->form_validation->set_rules('areaArabic', 'areaArabic', 'required');		if ($this->form_validation->run() == True)			{			$array = array(				'location_city_id' => $this->input->post('city') ,				'area_location' => $this->input->post('area') ,				'areaArabic' => $this->input->post('areaArabic')			);			$result = $this->Admin_dashboard->insert_add_location_area($array);			if ($result)				{				$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">New location successfully created. </div>');				redirect('Dashboard/add_location_area');				}			  else				{				redirect('Dashboard/add_location_area');				}			}		  else			{			$this->session->set_flashdata('error_msg', '<div class="alert alert-danger text-center"><strong>Error!</strong> All field is required! </div>');			redirect('Dashboard/add_location_area');			}		}	function delete_add_location_area($city_location_id)		{		$delete_data = array(			'city_location_id' => $city_location_id		);		$this->db->select('*');		$this->db->from('city_location');		$this->db->where($delete_data);		$results = $this->db->get();		$data = $results->result_array();		$area_location = $data[0]['area_location'];		$location_city_id = $data[0]['location_city_id'];		$address_full = array(			'city' => $location_city_id,			'area' => $area_location		);		$this->db->delete('city_location', $delete_data);		$this->db->delete('admin_adderss', $address_full);		$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">Data delete successfully. </div>');		redirect('Dashboard/add_location_area');		}	function notification_test()		{		echo 'hello my world';		}	function user_detail_full()		{		$this->load->model('UserRegister');		$data = $this->input->post('user_id');		$data = array(			'user_id' => $data		);		$result = $this->UserRegister->getaddress($data);		if (!empty($result))			{?>		<table id="example" class="table table-striped table-bordered"  align='center' border='2' style="width:100%">	 <thead>	 <tr><th>Id</th><th>Address</th><th>Bulding Number</th><th>Floor_number</th><th>Flat Number</th><th>Area</th><th>city_name</th></tr> </thead>	<tbody>	<?php			$i = 1; ?>		<?php			foreach($result as $value)				{ ?>	 <tr>			<td><?php				echo $i;				$i++; ?></td>			<td><?php				echo $value['street_address']; ?></td>			<td><?php				echo $value['bulding_number']; ?></td>			<td><?php				echo $value['floor_number']; ?></td>			<td><?php				echo $value['flat_number']; ?></td>			<td><?php				echo $value['area']; ?></td>			<td><?php				echo $value['city_name']; ?></td>	 <tr>	 <?php				} ?>	</tbody>	 </table>		<?php			}		  else			{?>				<section class="demo">		  <div class="container">		  <div style="display: inline-block;" align="center">		  <img src="<?php			echo base_url(); ?><?php			echo "uploads/category_image/not_data_found.png"?>">		  </div>		  </div>		</section>		<?php			}		}	function contact_to_admin()		{		$result['contact'] = $this->Admin_dashboard->contact_to_admin();		$this->load->view('templates/header');		$this->load->view('templates/contact_to_admin', $result);		$this->load->view('templates/footerss');		}	function Order_Place_Message()		{		$result['Place_Message'] = $this->Admin_dashboard->get_data_Place_Message();		$this->load->view('templates/header');		$this->load->view('templates/order_place_message', $result);		$this->load->view('templates/footerss');		}	function insert_Order_Place_Message()	{		$this->form_validation->set_rules('place_message', 'place message', 'trim|required|max_length[50]');		if ($this->form_validation->run() == True)			{			$place_message = $this->input->post('place_message');			$adminPlaceMessage = $this->input->post('adminPlaceMessage');			$datass = array(				'message_Id' => '1',				'admin_place_message' => $place_message,				'adminPlaceMessage' => $adminPlaceMessage			);			$result = $this->Admin_dashboard->insert_Order_Place_Message($datass);			if ($result)				{				$this->session->set_flashdata('success_msg', '<div class="alert alert-success text-center">Data Insert successfully. </div>');				redirect('Dashboard/Order_Place_Message');				}			}		  else			{			$this->session->set_flashdata('error_msg', '<div class="alert alert-danger text-center"><strong>Error!</strong> Your message should not be more than 50 character! </div>');			redirect('Dashboard/Order_Place_Message');			}	}}